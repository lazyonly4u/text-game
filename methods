


using System.ComponentModel;

namespace Methods
{    


    public class Rooms
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public List<string> Enemies { get; set; } = new List<string>();

        public Rooms(string Name, string Description)
        {
            this.Name = Name;
            this.Description = Description;
        }
    }


    public class Monster
    {
        public string Name { get; set; }
        public int Health { get; set; }
        public int Damage { get; set; }
        public int Drops { get; set; }

        public Monster(string Name, int Health, int Damage, int Drops)
        {
            this.Name = Name;
            this.Health = Health;
            this.Damage = Damage;
            this.Drops = Drops;
        }
    }

    public class Shop
    {
        public static void DisplayShop()
        {
            Console.WriteLine("Welcome to the shop!");
            Console.WriteLine("Here are the items available for purchase:");

            Console.WriteLine("\r\nHealth:\r\n");

            Console.WriteLine("1. Buy Health Potion - 15 coins - Health + 10");
            Console.WriteLine("2. Weed - 5 coins - Health +5");

            Console.WriteLine("\r\nWeapons:");
            Console.WriteLine("Swords\r\n");

            Console.WriteLine("3. Long slender blade (espada bastarda) - 16 coins - Damage 15");
            Console.WriteLine("4.french thin pencil sword build (light one handed small sword) - 22 coins - damage 20");
            Console.WriteLine("5. Arab curved thin sword (Arabian scimitar sword) - 30 coins - Damage 35");

            Console.WriteLine("\r\nKnife/ Daggers:\r\n");

            Console.WriteLine("6. Curved knife (kukri) - 10 coins - Damage 10");

            Console.WriteLine("\r\nBow and Arrow:\r\n");

            Console.WriteLine("7. Long horseback bow (the Yumi bow) - 13 coins - Damage 15");
            Console.WriteLine("8. Strong blow but heavy (manchu bow) - 35 coins - Damage 35");

            Console.WriteLine("\r\n9. Exit Shop\r\n");
            // Add logic for purchasing items and updating inventory
        }
    }

    public class secretitems
    {
        public static void DisplaySecretItems()
        {
            Console.WriteLine("Secret Items:\r\n");
            Console.WriteLine("1. Magical girl wand damage: 1000");
            Console.WriteLine("2. Avatar powers damage: 880");
            Console.WriteLine("3. Lostvayne (seven deadly sins) damage: 500");

        }
    }

    public class Inventory
    {
        public static void DisplayInventory()
        {
            Console.WriteLine("Your Inventory:");
            // Display items in the inventory
            Console.WriteLine("1. Wooden Sword");
            Console.WriteLine("2. Health Potion");
            Console.WriteLine("3. Weed");
            Console.WriteLine("4. Curved Knife");
            Console.WriteLine("5. Long Slender Blade");
            Console.WriteLine("6. French Thin Pencil Sword");
            Console.WriteLine("7. Arab Curved Thin Sword");
            Console.WriteLine("8. Long Horseback Bow");
            Console.WriteLine("9. Strong Blow Bow");
            Console.WriteLine("10. Exit Inventory");
            // Add logic for using items or checking inventory
        }
    }
    public class Battle
    {
        public static void StartBattle()
        {
            Console.WriteLine("A wild Walking Mushroom appears!");
            Console.WriteLine("Choose your action:");
            Console.WriteLine("1. Attack");
            Console.WriteLine("2. Run");
            string action = Console.ReadLine();
            if (action == "1")
            {
                Console.WriteLine("You attack the Walking Mushroom with your Wooden Sword!");
                // Add logic for attack damage and enemy response
            }
            else if (action == "2")
            {
                Console.WriteLine("You attempt to run away from the Walking Mushroom!");
                // Add logic for running away and consequences
            }
            else
            {
                Console.WriteLine("Invalid action. The Walking Mushroom attacks you!");
                // Add logic for enemy attack
            }

            // Add logic for battle mechanics, player actions, and enemy responses
        }
    }
    public class Player
    {
        public static int Health = 10;
        public static int Coins = 0;
        public static string Weapon = "Wooden Sword";
        public static void DisplayStats()
        {
            Console.WriteLine($"Health: {Health}");
            Console.WriteLine($"Coins: {Coins}");
            Console.WriteLine($"Weapon: {Weapon}");

        }
    }


    public class CREDITS
        {
        public static void DisplayCredits()
        {
            Console.WriteLine("Honorable mentions");
            Console.WriteLine("\r\nGame Name\r\n");
            Console.WriteLine("You, a Sword, and Some Bad Decisions .");

            Console.WriteLine("The Quest for More Coins (Because Why Not)");

            Console.WriteLine("Coins, Cuts, and Confusion");

            Console.WriteLine("The Dungeon Thatâ€™s Kinda Meh");

            Console.WriteLine("Swords, Spikes, and Silly Fights");

            Console.WriteLine("\r\nFinal Boss:\r\n");

            Console.WriteLine("Chi-Yu\r\nChien-Pao\r\n");

            Console.WriteLine("Scream Tail\r\nJigglypuff\r\n");

            Console.WriteLine("Snom\r\nYamask\r\n");

            Console.WriteLine("Magikarp\r\nGyarados\r\n");

            Console.WriteLine("Arceus\r\nDiancie\r\n");

            Console.WriteLine("Credits:\r\n");

            Console.Clear();

            Console.WriteLine("Game Idea: ME");
            Console.WriteLine("Game Design: ME");
            Console.WriteLine("Programming: ME");
            Console.WriteLine("\r\nGraphics: Visual Studio\r\n");

            Console.WriteLine("Special Thanks: Louise Christine Popp-Madsen, Zamzam Abdigani Ali, Sudden Motivation, Github, Copilot, My Sanity, My Brain Cells, Youtube, Spotify");
            Console.WriteLine("\r\nPlaytesting: ME\r\n");
            Console.WriteLine("Thanks for playing ig");
            Console.WriteLine("This game was created as a fun project and as an assignment");
            Console.WriteLine("Hope it was aight.");
            Console.WriteLine("If you have any feedback or suggestions, please DO NOT feel free to reach out.\r\n");

            Console.WriteLine("Press any key to return to the main menu.");
            Console.ReadKey();
        }
    }

    public class Exit
    {
        public static void ExitGame()
        {
            Console.WriteLine("Are you sure you want to exit? (yes/no)");
            string choice = Console.ReadLine();
            if (choice.ToLower() == "yes")
            {
                Console.WriteLine("Thanks for playing! Goodbye!");
                Environment.Exit(0);
            }
            else
            {
                Console.WriteLine("Returning to the game...");
            }
        }
    }

    public class Error
    {
        public static void DisplayError()
        {
            Console.WriteLine("An error has occurred. Please try again.");
        }
    }

    public class Help
    {
        public static void DisplayHelp()
        {
            Console.WriteLine("Help Menu:");
            Console.WriteLine("1. To navigate through the game, follow the prompts and enter your choices.");
            Console.WriteLine("2. To view your inventory, select the inventory option from the main menu.");
            Console.WriteLine("3. To visit the shop, select the shop option from the main menu.");
            Console.WriteLine("4. To check your stats, select the stats option from the main menu.");
            Console.WriteLine("5. To exit the game, select the exit option from the main menu.");
            Console.WriteLine("6. For any other assistance, please refer to the game documentation or contact support.");
        }
    }

    public class items
    {
        public static void DisplayItems()
        {
            Console.WriteLine("Available Items:");
            Console.WriteLine("1. Health Potion - Restores 10 health points.");
            Console.WriteLine("2. Weed - Restores 5 health points.");
            Console.WriteLine("3. Wooden Sword - Basic weapon with low damage.");
            Console.WriteLine("4. Curved Knife - Increases damage by 10 points.");
            Console.WriteLine("5. Long Slender Blade - Increases damage by 15 points.");
            Console.WriteLine("6. French Thin Pencil Sword - Increases damage by 20 points.");
            Console.WriteLine("7. Arab Curved Thin Sword - Increases damage by 35 points.");
            Console.WriteLine("8. Long Horseback Bow - Increases damage by 15 points.");
            Console.WriteLine("9. Strong Blow Bow - Increases damage by 35 points.");
        }
    }



}
