

using System.ComponentModel;
using System.Reflection.PortableExecutable;

namespace Methods
{


    public class Room
    {
        public string Name { get; set; }
        public string Description { get; set; }


        public Room(string Name, string Description)
        {
            this.Name = Name;
            this.Description = Description;
        }
        public void Enter()
        {
            Console.Clear();
            Console.WriteLine($"You enter: {Name}");
            Console.WriteLine(Description);

        }

    }



    public class Monster
    {
        public string Name { get; set; }
        public int Health { get; set; }
        public int Damage { get; set; }
        public int Coins { get; set; }
        public int Amount { get; set; }

        public Monster(string Name, int Health, int Damage, int Coins, int Amount)
        {
            this.Name = Name;
            this.Health = Health;
            this.Damage = Damage;
            this.Coins = Coins;
            this.Amount = Amount;
        }
    }

    public class health
    {
        public string Name { get; set; }
        public int Cost { get; set; }
        public int Heal { get; set; }
        public health(string Name, int Cost, int Heal)
        {
            this.Name = Name;
            this.Cost = Cost;
            this.Heal = Heal;
        }
    }
    public class weapons
    {
        public string Name { get; set; }
        public int Cost { get; set; }
        public int Damage { get; set; }
        public bool IsRanged { get; set; }
        public int UsesLeft { get; set; }

        public weapons(string Name, int Cost, int Damage, bool IsRanged, int UsesLeft)
        {
            this.Name = Name;
            this.Cost = Cost;
            this.Damage = Damage;
            this.IsRanged = IsRanged;
            this.UsesLeft = UsesLeft;

        }
    }

    public class Healing
    {
        public string Name { get; set; }
        public int Cost { get; set; }
        public int Heal { get; set; }

        public Healing(string Name, int Cost, int Heal)
        {
            this.Name = Name;
            this.Cost = Cost;
            this.Heal = Heal;
        }
    }
    public class Player
    {
        public static int Health { get; set; } = 50;
        public static int Coins { get; set; } = 10;
        public static string Weapon { get; set; }
        public static List<string> Items { get; set; } = new List<string>();

        public static Room CurrentRoom { get; set; }
        public static void DisplayStats()
        {
            Console.WriteLine($"Health: {Health}");
            Console.WriteLine($"Coins: {Coins}");
            Console.WriteLine($"Weapon: {Weapon}");
            Console.WriteLine("Items: " + (Items.Count > 0 ? string.Join(", ", Items) : "None"));
        }
    }

    public class intro
    {
        public static void DisplayIntro()
        {
            Console.ReadLine();

            Console.WriteLine(" .oooooo..o oooo   o8o                                                 .oooooo..o     .              .o8                           .oo.           .oooooo..o     .                .o88o.  .o88o. \r\nd8P'    `Y8 `888   `\"'                                                d8P'    `Y8   .o8             \"888                         .88' `8.        d8P'    `Y8   .o8                888 `\"  888 `\" \r\nY88bo.       888  oooo  ooo. .oo.  .oo.    .ooooo.   .oooo.o          Y88bo.      .o888oo  .oooo.    888oooo.   .oooo.o          88.  .8'        Y88bo.      .o888oo oooo  oooo  o888oo  o888oo  \r\n `\"Y8888o.   888  `888  `888P\"Y88bP\"Y88b  d88' `88b d88(  \"8           `\"Y8888o.    888   `P  )88b   d88' `88b d88(  \"8          `88.8P           `\"Y8888o.    888   `888  `888   888     888    \r\n     `\"Y88b  888   888   888   888   888  888ooo888 `\"Y88b.                `\"Y88b   888    .oP\"888   888   888 `\"Y88b.            d888[.8'            `\"Y88b   888    888   888   888     888    \r\noo     .d8P  888   888   888   888   888  888    .o o.  )88b .o.      oo     .d8P   888 . d8(  888   888   888 o.  )88b .o.      88' `88.        oo     .d8P   888 .  888   888   888     888    \r\n8\"\"88888P'  o888o o888o o888o o888o o888o `Y8bod8P' 8\"\"888P' Y8P      8\"\"88888P'    \"888\" `Y888\"\"8o  `Y8bod8P' 8\"\"888P' Y8P      `bodP'`88.      8\"\"88888P'    \"888\"  `V88V\"V8P' o888o   o888o   \r\n                                                              '                                                          '                                                                       \r\n                                                                                                                                                                                                 \r\n                                                                                                                                                                                                 ");
            Console.ReadLine();
            Console.Clear();

            Console.WriteLine("Congracts truck-kun ran you over and now you have regressed to the game world of Slimes, Stabs, & Stuff. Your mission win and try not to die");
            Console.ReadLine();
            Console.WriteLine("which you will");
            System.Threading.Thread.Sleep(1000);
            Console.Clear();


            Console.WriteLine("You look up and see a door with a sign saying : Hello sacrafice #584 ");
            System.Threading.Thread.Sleep(3000);
            Console.Clear();

            Console.WriteLine("You blink and when you open your eyes the sign says: Hello adventurerer there are 7 levels.");
            Console.WriteLine("After each level you will unlock a new one. You will always have a choice of going back a level to grind or find more loot.");
            Console.WriteLine("Though you can choos to fight a monster of run but picking run during a battle will have consiquences, so pick at your own expense ");
            Console.WriteLine("You can also choose to go to the shop to buy items and you can also choose to open your inventory to see what you have.");
            Console.WriteLine("May the Great Winged Lion have mercy on you ");
            Console.ReadLine();
            Console.Clear();
        }
    }



    public class run
    {
        public static void RunAway()
        {
            Random rand = new Random();
            int chance = rand.Next(1, 101); // 1 to 100
            if (chance <= 100) // 100% chance to successfully run away
            {
                Console.WriteLine("You successfully ran away!");
                Console.ReadLine();

            }
            else
            {
                int damage = rand.Next(5, 11); // Take between 5 and 10 damage
                Player.Health -= damage;
                Console.WriteLine($"You failed to run away and took {damage} damage! Your health is now {Player.Health}.");
                Console.ReadLine();

            }
        }
    }

    public class Shop
    {
        public static void DisplayShop(List<weapons> shopWeapons, List<Healing> shopHealing)
        {
            Console.WriteLine("Welcome to the shop!");
            Console.WriteLine("Would you like to buy Weapons or Healing?");
            string shopChoice = Console.ReadLine().ToLower();

            if (shopChoice == "healing")
            {
                DisplayHealingShop(shopHealing);
            }
            else
            {
                for (int i = 0; i < shopWeapons.Count; i++)
                {
                    var w = shopWeapons[i];
                    Console.WriteLine($"{i + 1}. {w.Name} - {w.Cost} coins - Damage {w.Damage}");
                }
                Console.WriteLine($"{shopWeapons.Count + 1}. Exit Shop");

                Console.WriteLine("\nEnter the number of the weapon you want to buy, or exit:");
                string input = Console.ReadLine();
                if (int.TryParse(input, out int choice))
                {
                    if (choice >= 1 && choice <= shopWeapons.Count)
                    {
                        var selected = shopWeapons[choice - 1];
                        if (Player.Coins >= selected.Cost)
                        {
                            Player.Coins -= selected.Cost;
                            if (!Player.Items.Contains(selected.Name))
                            {
                                Player.Items.Add(selected.Name);
                            }
                            Console.WriteLine($"You bought {selected.Name}! It has been added to your inventory. Use the inventory to equip it.");
                            Console.ReadLine();

                        }
                        else
                        {
                            Console.WriteLine("You don't have enough coins!");
                            Console.ReadLine();

                        }
                    }
                    else if (choice == shopWeapons.Count + 1)
                    {
                        Console.WriteLine("Exiting shop.");
                    }
                    else
                    {
                        Console.WriteLine("Invalid choice.");
                    }
                }
                else
                {
                    Console.WriteLine("Invalid input.");
                }
            }
        }

        public static void DisplayHealingShop(List<Healing> shopHealing)
        {
            Console.WriteLine("Healing Items for sale:");
            for (int i = 0; i < shopHealing.Count; i++)
            {
                var h = shopHealing[i];
                Console.WriteLine($"{i + 1}. {h.Name} - {h.Cost} coins - Heals {h.Heal} health");
            }
            Console.WriteLine($"{shopHealing.Count + 1}. Exit Shop");

            Console.WriteLine("\nEnter the number of the healing item you want to buy, or exit:");
            string input = Console.ReadLine();
            if (int.TryParse(input, out int choice))
            {
                if (choice >= 1 && choice <= shopHealing.Count)
                {
                    var selected = shopHealing[choice - 1];
                    if (Player.Coins >= selected.Cost)
                    {
                        Player.Coins -= selected.Cost;
                        Player.Items.Add(selected.Name);
                        Console.WriteLine($"You bought {selected.Name}! It has been added to your inventory. Use the inventory to consume it.");
                        Console.ReadLine();

                    }
                    else
                    {
                        Console.WriteLine("You don't have enough coins!");
                        Console.ReadLine();

                    }
                }
                else if (choice == shopHealing.Count + 1)
                {
                    Console.WriteLine("Exiting shop.");
                }
                else
                {
                    Console.WriteLine("Invalid choice.");
                }
            }
            else
            {
                Console.WriteLine("Invalid input.");
            }
        }
    }

    public class Inventory
    {
        public static void DisplayInventory()
        {
            Console.WriteLine("Your Inventory: ");
            Console.WriteLine($"Health: {Player.Health}");
            Console.WriteLine($"Coins: {Player.Coins}");
            Console.WriteLine($"Weapon: {Player.Weapon}");
            if (Player.Items.Count > 0)
            {
                Console.WriteLine("Items:");
                for (int i = 0; i < Player.Items.Count; i++)
                {
                    Console.WriteLine($"{i + 1}. {Player.Items[i]}");
                }
                Console.WriteLine("Type 'use <item number>' to use a healing item or 'equip <item number>' to equip a weapon.");
                string input = Console.ReadLine();
                if (input.StartsWith("use "))
                {
                    if (int.TryParse(input.Substring(4), out int itemNum) && itemNum >= 1 && itemNum <= Player.Items.Count)
                    {
                        string itemName = Player.Items[itemNum - 1];
                        // Example: Only allow using healing items
                        Healing healItem = GetHealingItemByName(itemName);
                        if (healItem != null)
                        {
                            Player.Health += healItem.Heal;
                            Console.WriteLine($"You used {healItem.Name} and restored {healItem.Heal} health! Current health: {Player.Health}");
                            Player.Items.RemoveAt(itemNum - 1);
                            Console.ReadLine();

                        }
                        else
                        {
                            Console.WriteLine("That item cannot be used for healing.");
                            Console.ReadLine();

                        }
                    }
                }
                else if (input.StartsWith("equip "))
                {
                    if (int.TryParse(input.Substring(6), out int itemNum) && itemNum >= 1 && itemNum <= Player.Items.Count)
                    {
                        string itemName = Player.Items[itemNum - 1];
                        // Example: Only allow equipping weapons
                        if (IsWeapon(itemName))
                        {
                            Player.Weapon = itemName;
                            Console.WriteLine($"You equipped {itemName}!");
                            Console.ReadLine();

                        }
                        else
                        {
                            Console.WriteLine("That item cannot be equipped as a weapon.");
                            Console.ReadLine();

                        }
                    }
                }
            }
            else
            {
                Console.WriteLine("No other items in inventory. ");
            }
            Console.WriteLine("Press Enter to continue...");
            Console.ReadLine();
        }

        // Helper: Check if item is a weapon (add your weapon names as needed)
        private static bool IsWeapon(string itemName)
        {
            return itemName == "Wooden Sword" ||
                   itemName == "Long Slender Blade" ||
                   itemName == "French Thin Pencil Sword" ||
                   itemName == "Arab Curved Thin Sword" ||
                   itemName == "Curved Knife" ||
                   itemName == "Long Horseback Bow" ||
                   itemName == "Strong Blow Bow";
        }

        // Helper: Get healing item by name (add your healing items as needed)
        private static Healing GetHealingItemByName(string itemName)
        {
            if (itemName == "Health Potion") return new Healing("Health Potion", 0, 10);
            if (itemName == "Weed") return new Healing("Weed", 0, 5);
            return null;
        }
    }



    public class secretitems
    {
        private static int wrongAttempts = 0;

        public static void DisplaySecretItems()
        {
            Console.WriteLine("Welcome to the Secret Items Shop! Please enter the code: ");
            string code = Console.ReadLine().ToLower();

            if (code == "magi")
            {
                Console.WriteLine("You have entered Magical girl wand damage: 1000, do you wish to add into your inventory? (y or n):");
                if (Console.ReadLine().ToLower() == "y")
                {
                    if (!Player.Items.Contains("Magicial girl wand"))
                    {
                        Player.Items.Add("Magicial girl wand");
                        Console.WriteLine("Magicial girl wand has been added to your inventory!");
                        Console.ReadLine();
                    }
                    else
                    {
                        Console.WriteLine("You already have Magicial girl wand in your inventory.");
                        Console.ReadLine();
                    }
                }
                else
                {
                    Console.WriteLine("Maybe next time!");
                    Console.ReadLine();
                }

                wrongAttempts = 0; // reset on success
            }
            else if (code == "av4")
            {
                Console.WriteLine("You have entered Avatar powers damage: 880, do you wish to add into your inventory? (y or n):");
                if (Console.ReadLine().ToLower() == "y")
                {
                    if (!Player.Items.Contains("Avatar Powers"))
                    {
                        Player.Items.Add("Avatar Powers");
                        Console.WriteLine("Avatar Powers has been added to your inventory!");
                        Console.ReadLine();

                    }
                    else
                    {
                        Console.WriteLine("You already have Avatar Powers in your inventory.");
                        Console.ReadLine();

                    }
                }
                else
                {
                    Console.WriteLine("Maybe next time!");
                    Console.ReadLine();

                }
                wrongAttempts = 0; // reset on success
            }
            else if (code == "l0st")
            {
                Console.WriteLine("You have entered Lostvayne (seven deadly sins) damage: 500, do you wish to add into your inventory? (y or n):");
                if (Console.ReadLine().ToLower() == "y")
                {
                    if (!Player.Items.Contains("Lostvayne"))
                    {
                        Player.Items.Add("Lostvayne");
                        Console.WriteLine("Lostvayne has been added to your inventory!");
                        Console.ReadLine();

                    }
                    else
                    {
                        Console.WriteLine("You already have Lostvayne in your inventory.");
                        Console.ReadLine();

                    }
                }
                else
                {
                    Console.WriteLine("Maybe next time!");
                    Console.ReadLine();

                }
                wrongAttempts = 0; // reset on success
            }
            else
            {
                wrongAttempts++;
                int penalty = wrongAttempts == 1 ? 1 : (wrongAttempts - 1) * 5;
                Console.WriteLine($"Invalid code. Punishment: -{penalty} coins.");
                Player.Coins -= penalty;
                Console.WriteLine($"You now have {Player.Coins} coins.");
                Console.WriteLine("Press Enter to continue...");
                Console.ReadLine();
            }
        }
    }

 


    public class Combat
    {
        public static void Fight(Monster monster)
        {
            Console.WriteLine($"A wild {monster.Name} appears!");
            int monsterHealth = monster.Health;
            int monsterDamage = monster.Damage;
            int monsterCoins = monster.Coins;
            int monsterAmount = monster.Amount;
            int playerAttack = GetPlayerAttack();

            while (monsterHealth > 0 && Player.Health > 0)
            {
                Console.WriteLine($"\nYour Health: {Player.Health} |||| {monster.Name} || Health: {monsterHealth} || Damage: {monsterDamage} || Coin Drops: {monsterCoins} || Amount of Monsters {monsterAmount}");
                Console.WriteLine("Choose your action: (attack/run)");
                string action = Console.ReadLine().ToLower();

                if (action == "attack")
                {
                    monsterHealth -= playerAttack;
                    Console.WriteLine($"You attack with your {Player.Weapon} and deal {playerAttack} damage!");

                    if (monsterHealth <= 0)
                    {
                        Console.WriteLine($"You defeated the {monster.Name}!");
                        Player.Coins += monsterCoins;
                        break;
                    }

                    Player.Health -= monster.Damage;
                    Console.WriteLine($"The {monster.Name} attacks you and deals {monster.Damage} damage!");
                }
                else if (action == "run")
                {
                    Console.WriteLine("You attempt to run away...");
                    Console.ReadLine();
                    run.RunAway();
                    break;
                }
                else
                {
                    Console.WriteLine("Invalid action. The monster attacks you! ");
                    Console.ReadLine();

                    Player.Health -= monster.Damage;
                }
            }

            if (Player.Health <= 0)
            {
                Console.WriteLine("hahahahahah you died lol ");
                Console.ReadLine();
                Environment.Exit(0);
            }
        }

        private static int GetPlayerAttack()
        {
            //make this more dynamic if use weapon objects?
            return Player.Weapon switch
            {
                "Wooden Sword" => 5,
                "Long Slender Blade" => 15,
                "French Thin Pencil Sword" => 20,
                "Arab Curved Thin Sword" => 35,
                "Curved Knife" => 10,
                "Long Horseback Bow" => 15,
                "Strong Blow Bow" => 35,
                _ => 2 // default for fists 
            };
        }
    }



    public class CREDITS
    {
        public static void DisplayCredits()
        {
            Console.WriteLine("Honorable mentions");
            Console.WriteLine("\r\nGame Name\r\n");
            Console.WriteLine("You, a Sword, and Some Bad Decisions .");

            Console.WriteLine("The Quest for More Coins (Because Why Not)");

            Console.WriteLine("Coins, Cuts, and Confusion");

            Console.WriteLine("The Dungeon That’s Kinda Meh");

            Console.WriteLine("Swords, Spikes, and Silly Fights");

            Console.WriteLine("\r\nFinal Boss:\r\n");

            Console.WriteLine("Chi-Yu\r\nChien-Pao\r\n");

            Console.WriteLine("Scream Tail\r\nJigglypuff\r\n");

            Console.WriteLine("Snom\r\nYamask\r\n");

            Console.WriteLine("Magikarp\r\nGyarados\r\n");

            Console.WriteLine("Arceus\r\nDiancie\r\n");

            Console.WriteLine("Credits:\r\n");

            Console.Clear();

            Console.WriteLine("Game Idea: ME");
            Console.WriteLine("Game Design: ME");
            Console.WriteLine("Programming: ME");
            Console.WriteLine("\r\nGraphics: Visual Studio\r\n");

            Console.WriteLine("Special Thanks: Louise Christine Popp-Madsen, Zamzam Abdigani Ali, Sudden Motivation, Github, Copilot, My Sanity, My Brain Cells, Youtube, Spotify");
            Console.WriteLine("\r\nPlaytesting: ME\r\n");
            Console.WriteLine("Thanks for playing ig");
            Console.WriteLine("This game was created as a fun project and as an assignment");
            Console.WriteLine("Hope it was aight.");
            Console.WriteLine("If you have any feedback or suggestions, please DO NOT feel free to reach out.\r\n");

            Console.WriteLine("Press any key to return to the main menu.");
            Console.ReadKey();
        }
    }

    public class Exit
    {
        public static void ExitGame()
        {
            Console.WriteLine("Are you SURE you want to exit? (yes/no)");
            string choice = Console.ReadLine();
            if (choice.ToLower() == "yes")
            {
                Console.WriteLine("Dawm ok... Farewell Adventurere, May the abyss be to your liking ");
                Console.ReadLine();

                Environment.Exit(0);
            }
            else
            {
                Console.WriteLine("Returning to the game...");
                Console.ReadLine();
                return;
            }
        }
    }


}
